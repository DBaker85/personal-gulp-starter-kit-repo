$include-html-grid-classes: true !default;
$include-xl-html-grid-classes: false !default;

.row-item--inline-block {
  display: inline-block;
  vertical-align: middle;
}

$total-columns: 10 !default;
$row-width: 1110px;
$column-gutter: 10px !default;

$default-float: left !default;
$opposite-direction: right !default;
$last-child-float: $opposite-direction !default;


// @FUNCTION
// $col-number - Found in settings file
// $total-columns - Found in settings file
@function grid-calc($col-number, $total-columns) {
  @return percentage(($col-number / $total-columns));
  @if $result == 0% {
    $result: 0;
  }
}

@mixin grid-row($behavior: false) {

  @include clearfix();

  @if $behavior == nest {
    // use @include grid-row(nest); to include a nested row
    width: auto;
    margin-#{$default-float}: -($column-gutter/2);
    margin-#{$opposite-direction}: -($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  } @else if $behavior == collapse {
    // use @include grid-row(collapse); to collapsed a container row margins
    width: 100%;
    margin: 0;
    max-width: $row-width;
  } @else if $behavior == nest-collapse {
    // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
    width: auto;
    margin: 0;
    max-width: none;
  } @else {
    // use @include grid-row; to use a container row
    width: 100%;
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    margin-top: 0;
    margin-bottom: 0;
  }

}

@mixin grid-column($columns: false,
$last-column: false,
$center: false,
$offset: false,
$push: false,
$pull: false,
$collapse: false,
$float: true,
$position: false,
$inline-block: false,
$inline-block-middle: false) {

  // If positioned for default .column, include relative position
  // push and pull require position set
  @if $position or $push or $pull {
    position: relative;
  }

  // If collapsed, get rid of gutter padding
  @if $collapse {

  } @else if $collapse == reset {
    padding-left: 0;
    padding-right: 0;
  } @else if $collapse == false {
    // Gutter padding whenever a column isn't set to collapse
    // (use $collapse:null to do nothing)
    padding-left: $column-gutter / 2;
    padding-right: $column-gutter / 2;
  }

  // If a column number is given, calculate width
  @if $columns {
    width: grid-calc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column {
      float: $opposite-direction;
    }
  }

  // Source Ordering, adds left/right depending on which you use.
  @if $push {
    #{$default-float}: grid-calc($push, $total-columns);
    #{$opposite-direction}: auto;
  }
  @if $pull {
    #{$opposite-direction}: grid-calc($pull, $total-columns);
    #{$default-float}: auto;
  }

  // If inline-block
  @if $inline-block {
    display: inline-block;
    vertical-align: top;
    float: left;
  } @else if $inline-block-middle {
    // If inline-block middle centered
    display: inline-block;
    vertical-align: middle;
  } @else if $float {
    @if $float == left or $float == true {
      float: $default-float;
    } @else if $float == right {
      float: $opposite-direction;
    } @else {
      float: none;
    }
  }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none;
  }

  // If offset, calculate appropriate margins
  @if $offset {
    margin-#{$default-float}: grid-calc($offset, $total-columns) !important;
  }

}

.row {
  @include grid-row;

  .row {
    // @include grid-row($behavior: nest);

    &.collapse {
      // Vous pouvez utiliser cette option pour annuler les marges des lignes
      @include grid-row($behavior: nest-collapse);
    }
  }
}

// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
@mixin grid-html-classes($size) {

  @for $i from 0 through $total-columns - 1 {
    .#{$size}-push-#{$i} {
      @include grid-column($push: $i, $collapse: null, $float: false);
    }
    .#{$size}-pull-#{$i} {
      @include grid-column($pull: $i, $collapse: null, $float: false);
    }
  }

  .column,
  .columns {
    @include grid-column($columns: false, $position: true);
  }

  @for $i from 1 through $total-columns {
    .#{$size}-#{$i} {
      @include grid-column($columns: $i, $collapse: null, $float: false);
    }
  }

  @for $i from 0 through $total-columns - 1 {
    .#{$size}-offset-#{$i} {
      @include grid-column($offset: $i, $collapse: null, $float: false);
    }
  }

  .#{$size}-reset-order {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    left: auto;
    right: auto;
    float: $default-float;
  }

  .column.#{$size}-centered,
  .columns.#{$size}-centered {
    @include grid-column($center: true, $collapse: null, $float: false);
  }

  .column.#{$size}-uncentered,
  .columns.#{$size}-uncentered {
    margin-#{$default-float}: 0;
    margin-#{$opposite-direction}: 0;
    float: $default-float;
  }

  // Fighting [class*="column"] + [class*="column"]:last-child
  .column.#{$size}-centered:last-child,
  .columns.#{$size}-centered:last-child {
    float: none;
  }

  // Fighting .column.<previous-size>-centered:last-child
  .column.#{$size}-uncentered:last-child,
  .columns.#{$size}-uncentered:last-child {
    float: $default-float;
  }

  .column.#{$size}-uncentered.opposite,
  .columns.#{$size}-uncentered.opposite {
    float: $opposite-direction;
  }

  .row {
    &.#{$size}-collapse {
      > .column,
      > .columns {
        @include grid-column($collapse: true, $float: false);
      }

      .row {
        margin-left: 0;
        margin-right: 0;
      }
    }
    &.#{$size}-uncollapse {
      > .column,
      > .columns {
        @include grid-column;
      }
    }
  }
}

$modules: () !default;

@mixin exports($name) {
  // Import from global scope
  $modules: $modules !global;
  // Check if a module is already on the list
  $module-index: index($modules, $name);
  @if (($module-index == null) or ($module-index == false)) {
    $modules: append($modules, $name) !global;
    @content;
  }
}

@include exports('grid') {
  @if $include-html-grid-classes {
    .row {
      @include grid-row;

      &.collapse {
        > .column,
        > .columns {
          @include grid-column($collapse: true, $float: false);
        }

        .row {
          margin-left: 0;
          margin-right: 0;
        }
      }

      .row {
        // @include grid-row($behavior: nest);
        &.collapse {
          @include grid-row($behavior: nest-collapse);
        }
      }
    }

    .column,
    .columns {
      @include grid-column($columns: $total-columns);
    }

    [class*="column"] + [class*="column"]:last-child {
      float: $last-child-float;
    }
    [class*="column"] + [class*="column"].end {
      float: $default-float;
    }

    @include media(all-phones) {
      @include grid-html-classes($size: small);
    }

    @include media(all-tablets) {
      @include grid-html-classes($size: medium);
      // Old push and pull classes
      @for $i from 0 through $total-columns - 1 {
        .push-#{$i} {
          @include grid-column($push: $i, $collapse: null, $float: false);
        }
        .pull-#{$i} {
          @include grid-column($pull: $i, $collapse: null, $float: false);
        }
      }
    }
    @include media(desktop) {
      @include grid-html-classes($size: large);
      @for $i from 0 through $total-columns - 1 {
        .push-#{$i} {
          @include grid-column($push: $i, $collapse: null, $float: false);
        }
        .pull-#{$i} {
          @include grid-column($pull: $i, $collapse: null, $float: false);
        }
      }
    }
  }
  @if $include-xl-html-grid-classes {
    @media #{$xlarge-up} {
      @include grid-html-classes($size: xlarge);
    }
    @media #{$xxlarge-up} {
      @include grid-html-classes($size: xxlarge);
    }
  }
}
